/// <reference types="node" />
export declare const TwoChannels: readonly [0, 1];
export declare type TwoChannel = typeof TwoChannels[number];
export declare const FourChannels: readonly [0, 1, 2, 3];
export declare type FourChannel = typeof FourChannels[number];
export declare const EightChannels: readonly [0, 1, 2, 3, 4, 5, 6, 7];
export declare type EightChannel = typeof EightChannels[number];
export declare type ChannelCount = 2 | 4 | 8;
export declare type McpOptions = {
    speed?: number;
    bus?: number;
};
export declare const McpKinds: readonly ["3008", "3004", "3002", "3202", "3204", "3208", "3304"];
export declare type McpKind = typeof McpKinds[number];
export declare type Channel<K> = K extends "3008" ? EightChannel : K extends "3004" ? FourChannel : K extends "3002" ? TwoChannel : K extends "3202" ? TwoChannel : K extends "3204" ? FourChannel : K extends "3208" ? EightChannel : EightChannel;
export declare type MaxMcpReading = 1023 | 4095;
export declare type Pin<C> = C extends 8 ? EightChannel : C extends 4 ? FourChannel : TwoChannel;
export interface McpSpiConfiguration<C extends ChannelCount> {
    channelCount: C;
    maxReading: MaxMcpReading;
    defaultSpeed: number;
    transferLength: number;
    readChannelCommand: (channel: Pin<C>) => Buffer;
    getValue: (response: Buffer) => number;
}
export interface McpDevice {
    read: () => Promise<number>;
    close: () => Promise<void>;
}
